fullnameOverride: otelcol-gateway

mode: deployment

image:
  repository: otel/opentelemetry-collector-contrib

config:
  receivers:
    prometheus:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusreceiver
      config:
        scrape_configs:
          - job_name: "otelcol-gateway"
            scrape_interval: 30s
            static_configs:
              - targets: ["${env:MY_POD_IP}:8888"]
  processors:
    resourcedetection:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor
      detectors: ["system", "k8snode"]
      override: false
    transform/drop_unneeded_resource_attributes:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
      error_mode: ignore
      trace_statements:
        - context: resource
          statements:
            - delete_key(attributes, "k8s.pod.start_time")
            - delete_key(attributes, "os.description")
            - delete_key(attributes, "os.type")
            - delete_key(attributes, "process.command_args")
            - delete_key(attributes, "process.executable.path")
            - delete_key(attributes, "process.pid")
            - delete_key(attributes, "process.runtime.description")
            - delete_key(attributes, "process.runtime.name")
            - delete_key(attributes, "process.runtime.version")
      metric_statements:
        - context: resource
          statements:
            - delete_key(attributes, "k8s.pod.start_time")
            - delete_key(attributes, "os.description")
            - delete_key(attributes, "os.type")
            - delete_key(attributes, "process.command_args")
            - delete_key(attributes, "process.executable.path")
            - delete_key(attributes, "process.pid")
            - delete_key(attributes, "process.runtime.description")
            - delete_key(attributes, "process.runtime.name")
            - delete_key(attributes, "process.runtime.version")
      log_statements:
        - context: resource
          statements:
            - delete_key(attributes, "k8s.pod.start_time")
            - delete_key(attributes, "os.description")
            - delete_key(attributes, "os.type")
            - delete_key(attributes, "process.command_args")
            - delete_key(attributes, "process.executable.path")
            - delete_key(attributes, "process.pid")
            - delete_key(attributes, "process.runtime.description")
            - delete_key(attributes, "process.runtime.name")
            - delete_key(attributes, "process.runtime.version")
    transform/add_resource_attributes_as_metric_attributes:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
      error_mode: ignore
      metric_statements:
        - context: datapoint
          statements:
            - set(attributes["deployment.environment"], resource.attributes["deployment.environment"])
            - set(attributes["service.version"], resource.attributes["service.version"])
            - set(attributes["host.name"], resource.attributes["host.name"])
            - set(attributes["k8s.node.name"], resource.attributes["k8s.node.name"])
            - set(attributes["k8s.namespace.name"], resource.attributes["k8s.namespace.name"])
            - set(attributes["k8s.pod.name"], resource.attributes["k8s.pod.name"])
            - set(attributes["k8s.container.name"], resource.attributes["k8s.container.name"])
  exporters:
    otlphttp:
      # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlphttpexporter
      endpoint: "${env:OTELCOL_OTLPHTTP_ENDPOINT}"
      auth:
        authenticator: basicauth/otlphttp
  extensions:
    basicauth/otlphttp:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/extension/basicauthextension
      client_auth:
        username: "${env:OTELCOL_OTLPHTTP_USERNAME}"
        password: "${env:OTELCOL_OTLPHTTP_PASSWORD}"
  service:
    extensions:
      - health_check
      - basicauth/otlphttp
    pipelines:
      traces:
        receivers: [otlp]
        processors: [memory_limiter, resourcedetection, transform/drop_unneeded_resource_attributes, batch]
        exporters: [otlphttp]
      metrics:
        receivers: [otlp, prometheus]
        processors: [memory_limiter, resourcedetection, transform/drop_unneeded_resource_attributes, transform/add_resource_attributes_as_metric_attributes, batch]
        exporters: [otlphttp]
      logs:
        receivers: [otlp]
        processors: [memory_limiter, resourcedetection, transform/drop_unneeded_resource_attributes, batch]
        exporters: [otlphttp]

ports:
  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false

clusterRole:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["nodes"]
      verbs: ["get", "list"]

extraEnvs:
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName

extraEnvsFrom:
  - secretRef:
      name: otelcol-secret

resources:
  limits:
    cpu: 250m
    memory: 256Mi

nodeSelector:
  server-role-infra: 'true'
