fullnameOverride: otelcol

mode: daemonset

image:
  repository: otel/opentelemetry-collector-contrib

presets:
  hostMetrics:
    enabled: true
  kubernetesAttributes:
    enabled: true
  logsCollection:
    enabled: true
    includeCollectorLogs: true
    storeCheckpoints: true

config:
  receivers:
    hostmetrics:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/hostmetricsreceiver
      collection_interval: 30s
      scrapers:
        cpu:
          metrics:
            system.cpu.logical.count:
              enabled: true
            system.cpu.utilization:
              enabled: true
        filesystem:
          metrics:
            system.filesystem.utilization:
              enabled: true
        memory:
          metrics:
            system.memory.limit:
              enabled: true
            system.memory.utilization:
              enabled: true
        paging:
          metrics:
            system.paging.utilization:
              enabled: true
        network:
          exclude:
            interfaces: ["cali.*", "veth.*"]
            match_type: regexp
        processes:
    prometheus:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusreceiver
      config:
        scrape_configs:
          - job_name: "otelcol-agent"
            scrape_interval: 30s
            static_configs:
              - targets: ["${env:MY_POD_IP}:8888"]
  processors:
    resourcedetection:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor
      detectors: ["system", "k8snode"]
      override: false
  exporters:
    otlphttp:
      # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlphttpexporter
      endpoint: "http://otelcol-gateway:4318"
  service:
    extensions:
      - health_check
    pipelines:
      traces:
        receivers: [otlp]
        processors: [memory_limiter, resourcedetection, batch]
        exporters: [otlphttp]
      metrics:
        receivers: [otlp, prometheus, hostmetrics]
        processors: [memory_limiter, resourcedetection, batch]
        exporters: [otlphttp]
      logs:
        receivers: [otlp]
        processors: [memory_limiter, resourcedetection, batch]
        exporters: [otlphttp]

hostNetwork: true
dnsPolicy: ClusterFirstWithHostNet

ports:
  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false

clusterRole:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["nodes"]
      verbs: ["get", "list"]

resources:
  limits:
    cpu: 250m
    memory: 256Mi

tolerations:
  - key: dedicated-server
    operator: Exists
    effect: NoSchedule
